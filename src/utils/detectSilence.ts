export const detectSilence =
    async (
        file: File,                      // üìÇ –§–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç
        silenceThreshold = 0.01,         // üéö –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã (–∞–º–ø–ª–∏—Ç—É–¥–∞ –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–∏—à–∏–Ω–æ–π)
        minSilenceDuration = 0.1         // ‚è± –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã (—Å–µ–∫—É–Ω–¥—ã)
    ) => {
        const audioContext = new AudioContext(); // üéß –°–æ–∑–¥–∞—ë–º –∞—É–¥–∏–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤—É–∫–∞
        const arrayBuffer = await file.arrayBuffer(); // üì¶ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ (ArrayBuffer)

        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer); // üîì –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –∞—É–¥–∏–æ–±—É—Ñ–µ—Ä
        // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –∞—É–¥–∏–æ—Å–µ–º–ø–ª–æ–≤.
        //     audioBuffer —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (sampleRate, duration –∏ —Ç.–¥.).

        const channelData = audioBuffer.getChannelData(0); // üéö –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª–∞ (–æ–±—ã—á–Ω–æ –ª–µ–≤—ã–π –∫–∞–Ω–∞–ª)

        const sampleRate = audioBuffer.sampleRate; // ‚è± –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ (samples per second)
        // –°–∫–æ–ª—å–∫–æ —Å—ç–º–ø–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (–æ–±—ã—á–Ω–æ 44100 –∏–ª–∏ 48000).
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –≤ —Å–µ–∫—É–Ω–¥—ã –≤—Ä–µ–º–µ–Ω–∏.


        const silenceSamples = minSilenceDuration * sampleRate; // üéØ –°–∫–æ–ª—å–∫–æ —Å—ç–º–ø–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ä—è–¥, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞–ª–æ—Å—å –ø–∞—É–∑–æ–π
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏—à–∏–Ω—ã.
        // –ù–∞–ø—Ä–∏–º–µ—Ä, 0.3 —Å–µ–∫—É–Ω–¥—ã * 44100 samples/second = 13230 samples.

        const silences = [];        // ‚èπ –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—É–∑
        let isSilent = false;       // ‚úÖ –§–ª–∞–≥: –º—ã —Å–µ–π—á–∞—Å –≤ —Ç–∏—à–∏–Ω–µ –∏–ª–∏ –Ω–µ—Ç?
        let silenceStart = 0;       // ‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –ø–∞—É–∑—ã –≤ —Å—ç–º–ø–ª–∞—Ö


        for (let i = 0; i < channelData.length; i++) {
            const amplitude = Math.abs(channelData[i]); // üìà –ê–º–ø–ª–∏—Ç—É–¥–∞ —Å–∏–≥–Ω–∞–ª–∞ (–ø–æ –º–æ–¥—É–ª—é)
            // –ê–º–ø–ª–∏—Ç—É–¥–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏.
            //     –ó–Ω–∞—á–µ–Ω–∏—è –±–ª–∏–∑–∫–∏–µ –∫ 0 ‚Äî –ø–æ—á—Ç–∏ —Ç–∏—à–∏–Ω–∞.

            //–ï—Å–ª–∏ –∞–º–ø–ª–∏—Ç—É–¥–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ —Ç–∏—à–∏–Ω—ã –∏ –µ—â—ë –Ω–µ –≤ —Ç–∏—à–∏–Ω–µ:
            if (!isSilent && amplitude < silenceThreshold) {
                isSilent = true;        // üü¢ –ú—ã –≤—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏—à–∏–Ω—ã
                silenceStart = i;       // ‚è± –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–∏—à–∏–Ω—ã
            }

            //–ï—Å–ª–∏ –∞–º–ø–ª–∏—Ç—É–¥–∞ —Å—Ç–∞–ª–∞ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ (—Ç–∏—à–∏–Ω–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å):
            if (isSilent && amplitude >= silenceThreshold) {
                const silenceEnd = i;                         // üõë –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–Ω–µ—Ü —Ç–∏—à–∏–Ω—ã
                const duration = silenceEnd - silenceStart;   // ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã –≤ —Å—ç–º–ø–ª–∞—Ö


                //–ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–π ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
                if (duration >= silenceSamples) {
                    silences.push({
                        start: silenceStart / sampleRate,       // üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        end: silenceEnd / sampleRate,           // üïí –í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        duration: duration / sampleRate         // ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    });
                }

                isSilent = false;
            }
        }

        console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—É–∑—ã:", silences);
        return { silences, audioBuffer };
    };

